version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ../../api-gateway
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    volumes:
      - ../../api-gateway:/app
    command: go run cmd/main.go
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8081
      - ORDER_SERVICE_URL=http://order-service:8082
      - PRODUCT_SERVICE_URL=http://product-service:8083
      - PAYMENT_SERVICE_URL=http://payment-service:8084
      - NOTIFICATION_SERVICE_URL=http://notification-service:8085
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Auth Service
  auth-service:
    build:
      context: ../../auth-service
      dockerfile: Dockerfile.dev
    ports:
      - "8081:8081"
    volumes:
      - ../../auth-service:/app
    command: go run cmd/main.go
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=auth_db
      - JWT_SECRET=your-secret-key
      - JWT_TOKEN_EXPIRY_MINUTES=60
    depends_on:
      postgres:
        condition: service_healthy

  # Order Service
  order-service:
    build:
      context: ../../order-service
      dockerfile: Dockerfile.dev
    ports:
      - "8082:8082"
    volumes:
      - ../../order-service:/app
    command: go run cmd/main.go
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=order_db
    depends_on:
      postgres:
        condition: service_healthy

  # Product Service
  product-service:
    build:
      context: ../../product-service
      dockerfile: Dockerfile.dev
    ports:
      - "8083:8083"
    volumes:
      - ../../product-service:/app
    command: go run cmd/main.go
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=product_db
    depends_on:
      postgres:
        condition: service_healthy

  # Payment Service
  payment-service:
    build:
      context: ../../payment-service
      dockerfile: Dockerfile.dev
    ports:
      - "8084:8084"
    volumes:
      - ../../payment-service:/app
    command: go run cmd/main.go
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=payment_db
    depends_on:
      postgres:
        condition: service_healthy

  # Notification Service
  notification-service:
    build:
      context: ../../notification-service
      dockerfile: Dockerfile.dev
    ports:
      - "8085:8085"
    volumes:
      - ../../notification-service:/app
    command: go run cmd/main.go
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy

  # PostgreSQL
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
