{"ast":null,"code":"import{useState,useEffect}from'react';const HEALTH_CHECK_INTERVAL=5*60*1000;// 5分鐘\nconst SERVICES=[{name:'Auth Service',url:'https://ordermanagersystem-auth-service.onrender.com/health'},{name:'Product Service',url:'https://ordermanagersystem-product-service.onrender.com/health'},{name:'Order Service',url:'https://ordermanagersystem-order-service.onrender.com/health'},{name:'Payment Service',url:'https://ordermanagersystem-payment-service.onrender.com/health'},{name:'Notification Service',url:'https://ordermanagersystem-notification-service.onrender.com/health'},{name:'Main Service',url:'https://ordermanagersystem.onrender.com/health'}];export const useHealthCheck=()=>{const[serviceStatus,setServiceStatus]=useState({});const[isAnyServiceDown,setIsAnyServiceDown]=useState(false);const checkHealth=async()=>{const newStatus={};let anyServiceDown=false;await Promise.all(SERVICES.map(async service=>{try{const response=await fetch(service.url);const isHealthy=response.ok;newStatus[service.name]=isHealthy;if(!isHealthy)anyServiceDown=true;}catch(error){console.error(`Health check failed for ${service.name}:`,error);newStatus[service.name]=false;anyServiceDown=true;}}));setServiceStatus(newStatus);setIsAnyServiceDown(anyServiceDown);};useEffect(()=>{// 初始檢查\ncheckHealth();// 設置定期檢查\nconst interval=setInterval(checkHealth,HEALTH_CHECK_INTERVAL);// 清理函數\nreturn()=>clearInterval(interval);},[]);return{serviceStatus,isAnyServiceDown};};","map":{"version":3,"names":["useState","useEffect","HEALTH_CHECK_INTERVAL","SERVICES","name","url","useHealthCheck","serviceStatus","setServiceStatus","isAnyServiceDown","setIsAnyServiceDown","checkHealth","newStatus","anyServiceDown","Promise","all","map","service","response","fetch","isHealthy","ok","error","console","interval","setInterval","clearInterval"],"sources":["/Users/sumingkai/Documents/OrderManagerSystem/frontend/src/utils/healthCheck.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst HEALTH_CHECK_INTERVAL = 5 * 60 * 1000; // 5分鐘\n\nconst SERVICES = [\n    {\n        name: 'Auth Service',\n        url: 'https://ordermanagersystem-auth-service.onrender.com/health'\n    },\n    {\n        name: 'Product Service',\n        url: 'https://ordermanagersystem-product-service.onrender.com/health'\n    },\n    {\n        name: 'Order Service',\n        url: 'https://ordermanagersystem-order-service.onrender.com/health'\n    },\n    {\n        name: 'Payment Service',\n        url: 'https://ordermanagersystem-payment-service.onrender.com/health'\n    },\n    {\n        name: 'Notification Service',\n        url: 'https://ordermanagersystem-notification-service.onrender.com/health'\n    },\n    {\n        name: 'Main Service',\n        url: 'https://ordermanagersystem.onrender.com/health'\n    }\n];\n\nexport const useHealthCheck = () => {\n    const [serviceStatus, setServiceStatus] = useState({});\n    const [isAnyServiceDown, setIsAnyServiceDown] = useState(false);\n\n    const checkHealth = async () => {\n        const newStatus = {};\n        let anyServiceDown = false;\n\n        await Promise.all(\n            SERVICES.map(async (service) => {\n                try {\n                    const response = await fetch(service.url);\n                    const isHealthy = response.ok;\n                    newStatus[service.name] = isHealthy;\n                    if (!isHealthy) anyServiceDown = true;\n                } catch (error) {\n                    console.error(`Health check failed for ${service.name}:`, error);\n                    newStatus[service.name] = false;\n                    anyServiceDown = true;\n                }\n            })\n        );\n\n        setServiceStatus(newStatus);\n        setIsAnyServiceDown(anyServiceDown);\n    };\n\n    useEffect(() => {\n        // 初始檢查\n        checkHealth();\n\n        // 設置定期檢查\n        const interval = setInterval(checkHealth, HEALTH_CHECK_INTERVAL);\n\n        // 清理函數\n        return () => clearInterval(interval);\n    }, []);\n\n    return {\n        serviceStatus,\n        isAnyServiceDown\n    };\n}; "],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE3C,KAAM,CAAAC,qBAAqB,CAAG,CAAC,CAAG,EAAE,CAAG,IAAI,CAAE;AAE7C,KAAM,CAAAC,QAAQ,CAAG,CACb,CACIC,IAAI,CAAE,cAAc,CACpBC,GAAG,CAAE,6DACT,CAAC,CACD,CACID,IAAI,CAAE,iBAAiB,CACvBC,GAAG,CAAE,gEACT,CAAC,CACD,CACID,IAAI,CAAE,eAAe,CACrBC,GAAG,CAAE,8DACT,CAAC,CACD,CACID,IAAI,CAAE,iBAAiB,CACvBC,GAAG,CAAE,gEACT,CAAC,CACD,CACID,IAAI,CAAE,sBAAsB,CAC5BC,GAAG,CAAE,qEACT,CAAC,CACD,CACID,IAAI,CAAE,cAAc,CACpBC,GAAG,CAAE,gDACT,CAAC,CACJ,CAED,MAAO,MAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CAChC,KAAM,CAACC,aAAa,CAAEC,gBAAgB,CAAC,CAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC,CACtD,KAAM,CAACS,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGV,QAAQ,CAAC,KAAK,CAAC,CAE/D,KAAM,CAAAW,WAAW,CAAG,KAAAA,CAAA,GAAY,CAC5B,KAAM,CAAAC,SAAS,CAAG,CAAC,CAAC,CACpB,GAAI,CAAAC,cAAc,CAAG,KAAK,CAE1B,KAAM,CAAAC,OAAO,CAACC,GAAG,CACbZ,QAAQ,CAACa,GAAG,CAAC,KAAO,CAAAC,OAAO,EAAK,CAC5B,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACF,OAAO,CAACZ,GAAG,CAAC,CACzC,KAAM,CAAAe,SAAS,CAAGF,QAAQ,CAACG,EAAE,CAC7BT,SAAS,CAACK,OAAO,CAACb,IAAI,CAAC,CAAGgB,SAAS,CACnC,GAAI,CAACA,SAAS,CAAEP,cAAc,CAAG,IAAI,CACzC,CAAE,MAAOS,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,2BAA2BL,OAAO,CAACb,IAAI,GAAG,CAAEkB,KAAK,CAAC,CAChEV,SAAS,CAACK,OAAO,CAACb,IAAI,CAAC,CAAG,KAAK,CAC/BS,cAAc,CAAG,IAAI,CACzB,CACJ,CAAC,CACL,CAAC,CAEDL,gBAAgB,CAACI,SAAS,CAAC,CAC3BF,mBAAmB,CAACG,cAAc,CAAC,CACvC,CAAC,CAEDZ,SAAS,CAAC,IAAM,CACZ;AACAU,WAAW,CAAC,CAAC,CAEb;AACA,KAAM,CAAAa,QAAQ,CAAGC,WAAW,CAACd,WAAW,CAAET,qBAAqB,CAAC,CAEhE;AACA,MAAO,IAAMwB,aAAa,CAACF,QAAQ,CAAC,CACxC,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CACHjB,aAAa,CACbE,gBACJ,CAAC,CACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}