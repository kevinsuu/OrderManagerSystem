{"ast":null,"code":"import axios from'axios';const AUTH_SERVICE_URL='https://ordermanagersystem-auth-service.onrender.com';// 刷新 token 的函數\nexport const refreshToken=async()=>{try{const refreshToken=localStorage.getItem('refreshToken');if(!refreshToken){throw new Error('沒有可用的刷新令牌');}const response=await axios.post(`${AUTH_SERVICE_URL}/api/v1/auth/refresh`,{refreshToken:refreshToken});if(response.data.token){localStorage.setItem('userToken',response.data.token);if(response.data.refreshToken){localStorage.setItem('refreshToken',response.data.refreshToken);}return response.data.token;}else{throw new Error('刷新令牌失敗');}}catch(error){console.error('刷新令牌失敗:',error);localStorage.removeItem('userToken');localStorage.removeItem('refreshToken');localStorage.removeItem('userData');throw error;}};// 建立一個帶有統一錯誤處理的 axios 實例\nexport const createAuthAxios=navigate=>{const instance=axios.create({headers:{'Content-Type':'application/json','Accept':'application/json'}});// 是否正在刷新 token\nlet isRefreshing=false;// 等待令牌刷新的請求隊列\nlet failedQueue=[];// 處理隊列中的請求\nconst processQueue=function(error){let token=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;failedQueue.forEach(prom=>{if(error){prom.reject(error);}else{prom.resolve(token);}});failedQueue=[];};// 請求攔截器 - 添加令牌\ninstance.interceptors.request.use(config=>{const token=localStorage.getItem('userToken');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>Promise.reject(error));// 響應攔截器 - 處理令牌刷新\ninstance.interceptors.response.use(response=>response,async error=>{var _error$response;const originalRequest=error.config;// 如果是 401 錯誤且不是刷新令牌的請求，且請求未重試過\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401&&!originalRequest._retry&&!originalRequest.url.includes('/api/v1/auth/refresh')){if(isRefreshing){// 如果已經在刷新，將請求加入隊列\nreturn new Promise((resolve,reject)=>{failedQueue.push({resolve,reject});}).then(token=>{originalRequest.headers.Authorization=`Bearer ${token}`;return instance(originalRequest);}).catch(err=>Promise.reject(err));}originalRequest._retry=true;isRefreshing=true;try{// 嘗試刷新令牌\nconst newToken=await refreshToken();originalRequest.headers.Authorization=`Bearer ${newToken}`;// 處理等待中的請求\nprocessQueue(null,newToken);return instance(originalRequest);}catch(refreshError){// 刷新失敗，處理等待中的請求\nprocessQueue(refreshError);// 重定向到登入頁面\nif(navigate){navigate('/login');}return Promise.reject(refreshError);}finally{isRefreshing=false;}}return Promise.reject(error);});return instance;};","map":{"version":3,"names":["axios","AUTH_SERVICE_URL","refreshToken","localStorage","getItem","Error","response","post","data","token","setItem","error","console","removeItem","createAuthAxios","navigate","instance","create","headers","isRefreshing","failedQueue","processQueue","arguments","length","undefined","forEach","prom","reject","resolve","interceptors","request","use","config","Authorization","Promise","_error$response","originalRequest","status","_retry","url","includes","push","then","catch","err","newToken","refreshError"],"sources":["/Users/sumingkai/Documents/OrderManagerSystem/frontend/src/utils/auth.js"],"sourcesContent":["import axios from 'axios';\n\nconst AUTH_SERVICE_URL = 'https://ordermanagersystem-auth-service.onrender.com';\n\n// 刷新 token 的函數\nexport const refreshToken = async () => {\n    try {\n        const refreshToken = localStorage.getItem('refreshToken');\n        if (!refreshToken) {\n            throw new Error('沒有可用的刷新令牌');\n        }\n\n        const response = await axios.post(`${AUTH_SERVICE_URL}/api/v1/auth/refresh`, {\n            refreshToken: refreshToken\n        });\n\n        if (response.data.token) {\n            localStorage.setItem('userToken', response.data.token);\n            if (response.data.refreshToken) {\n                localStorage.setItem('refreshToken', response.data.refreshToken);\n            }\n            return response.data.token;\n        } else {\n            throw new Error('刷新令牌失敗');\n        }\n    } catch (error) {\n        console.error('刷新令牌失敗:', error);\n        localStorage.removeItem('userToken');\n        localStorage.removeItem('refreshToken');\n        localStorage.removeItem('userData');\n        throw error;\n    }\n};\n\n// 建立一個帶有統一錯誤處理的 axios 實例\nexport const createAuthAxios = (navigate) => {\n    const instance = axios.create({\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n    });\n\n    // 是否正在刷新 token\n    let isRefreshing = false;\n    // 等待令牌刷新的請求隊列\n    let failedQueue = [];\n\n    // 處理隊列中的請求\n    const processQueue = (error, token = null) => {\n        failedQueue.forEach(prom => {\n            if (error) {\n                prom.reject(error);\n            } else {\n                prom.resolve(token);\n            }\n        });\n        failedQueue = [];\n    };\n\n    // 請求攔截器 - 添加令牌\n    instance.interceptors.request.use(\n        (config) => {\n            const token = localStorage.getItem('userToken');\n            if (token) {\n                config.headers.Authorization = `Bearer ${token}`;\n            }\n            return config;\n        },\n        (error) => Promise.reject(error)\n    );\n\n    // 響應攔截器 - 處理令牌刷新\n    instance.interceptors.response.use(\n        (response) => response,\n        async (error) => {\n            const originalRequest = error.config;\n\n            // 如果是 401 錯誤且不是刷新令牌的請求，且請求未重試過\n            if (error.response?.status === 401\n                && !originalRequest._retry\n                && !originalRequest.url.includes('/api/v1/auth/refresh')) {\n\n                if (isRefreshing) {\n                    // 如果已經在刷新，將請求加入隊列\n                    return new Promise((resolve, reject) => {\n                        failedQueue.push({ resolve, reject });\n                    })\n                        .then(token => {\n                            originalRequest.headers.Authorization = `Bearer ${token}`;\n                            return instance(originalRequest);\n                        })\n                        .catch(err => Promise.reject(err));\n                }\n\n                originalRequest._retry = true;\n                isRefreshing = true;\n\n                try {\n                    // 嘗試刷新令牌\n                    const newToken = await refreshToken();\n                    originalRequest.headers.Authorization = `Bearer ${newToken}`;\n\n                    // 處理等待中的請求\n                    processQueue(null, newToken);\n                    return instance(originalRequest);\n                } catch (refreshError) {\n                    // 刷新失敗，處理等待中的請求\n                    processQueue(refreshError);\n\n                    // 重定向到登入頁面\n                    if (navigate) {\n                        navigate('/login');\n                    }\n                    return Promise.reject(refreshError);\n                } finally {\n                    isRefreshing = false;\n                }\n            }\n\n            return Promise.reject(error);\n        }\n    );\n\n    return instance;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}