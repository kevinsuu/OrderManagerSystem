{"ast":null,"code":"var _jsxFileName = \"/Users/sumingkai/Documents/OrderManagerSystem/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    // 在組件加載時檢查本地存儲中的用戶數據\n    const userData = localStorage.getItem('userData');\n    if (userData) {\n      setUser(JSON.parse(userData));\n    }\n    setLoading(false);\n\n    // 在組件加載時檢查 token\n    const token = localStorage.getItem('token');\n    if (token) {\n      // 驗證 token 是否有效\n      verifyToken(token);\n    }\n  }, []);\n  const verifyToken = async token => {\n    try {\n      // 可以添加 token 驗證邏輯\n      setIsAuthenticated(true);\n    } catch (error) {\n      localStorage.removeItem('token');\n      setIsAuthenticated(false);\n    }\n  };\n  const login = userData => {\n    setUser(userData);\n    localStorage.setItem('userData', JSON.stringify(userData));\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('userToken');\n    localStorage.removeItem('userData');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      loading,\n      isAuthenticated\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","userData","localStorage","getItem","JSON","parse","token","verifyToken","error","removeItem","login","setItem","stringify","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/sumingkai/Documents/OrderManagerSystem/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n    useEffect(() => {\n        // 在組件加載時檢查本地存儲中的用戶數據\n        const userData = localStorage.getItem('userData');\n        if (userData) {\n            setUser(JSON.parse(userData));\n        }\n        setLoading(false);\n\n        // 在組件加載時檢查 token\n        const token = localStorage.getItem('token');\n        if (token) {\n            // 驗證 token 是否有效\n            verifyToken(token);\n        }\n    }, []);\n\n    const verifyToken = async (token) => {\n        try {\n            // 可以添加 token 驗證邏輯\n            setIsAuthenticated(true);\n        } catch (error) {\n            localStorage.removeItem('token');\n            setIsAuthenticated(false);\n        }\n    };\n\n    const login = (userData) => {\n        setUser(userData);\n        localStorage.setItem('userData', JSON.stringify(userData));\n    };\n\n    const logout = () => {\n        setUser(null);\n        localStorage.removeItem('userToken');\n        localStorage.removeItem('userData');\n    };\n\n    return (\n        <AuthContext.Provider value={{ user, login, logout, loading, isAuthenticated }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAE7DE,SAAS,CAAC,MAAM;IACZ;IACA,MAAMa,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,IAAIF,QAAQ,EAAE;MACVL,OAAO,CAACQ,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAC,CAAC;IACjC;IACAH,UAAU,CAAC,KAAK,CAAC;;IAEjB;IACA,MAAMQ,KAAK,GAAGJ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIG,KAAK,EAAE;MACP;MACAC,WAAW,CAACD,KAAK,CAAC;IACtB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,WAAW,GAAG,MAAOD,KAAK,IAAK;IACjC,IAAI;MACA;MACAN,kBAAkB,CAAC,IAAI,CAAC;IAC5B,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACZN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;MAChCT,kBAAkB,CAAC,KAAK,CAAC;IAC7B;EACJ,CAAC;EAED,MAAMU,KAAK,GAAIT,QAAQ,IAAK;IACxBL,OAAO,CAACK,QAAQ,CAAC;IACjBC,YAAY,CAACS,OAAO,CAAC,UAAU,EAAEP,IAAI,CAACQ,SAAS,CAACX,QAAQ,CAAC,CAAC;EAC9D,CAAC;EAED,MAAMY,MAAM,GAAGA,CAAA,KAAM;IACjBjB,OAAO,CAAC,IAAI,CAAC;IACbM,YAAY,CAACO,UAAU,CAAC,WAAW,CAAC;IACpCP,YAAY,CAACO,UAAU,CAAC,UAAU,CAAC;EACvC,CAAC;EAED,oBACInB,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAEpB,IAAI;MAAEe,KAAK;MAAEG,MAAM;MAAEhB,OAAO;MAAEE;IAAgB,CAAE;IAAAN,QAAA,EAC1EA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACzB,EAAA,CA/CWF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAiDzB,OAAO,MAAM6B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACzB,MAAMC,OAAO,GAAGpC,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAACgC,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAClE;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}