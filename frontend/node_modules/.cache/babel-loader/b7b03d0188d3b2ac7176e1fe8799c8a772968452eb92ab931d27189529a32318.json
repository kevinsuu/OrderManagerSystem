{"ast":null,"code":"import axios from 'axios';\n\n// const API_URL = 'https://ordermanagersystem-auth-service.onrender.com';\nconst API_URL = 'http://localhost:8083';\n\n// 創建 axios 實例\nconst axiosInstance = axios.create({\n  baseURL: `${API_URL}/api/v1`,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 請求攔截器，添加 token\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  console.log('Current token:', token); // 調試用\n\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n    console.log('Request headers:', config.headers); // 調試用\n  } else {\n    console.warn('No token found in localStorage');\n  }\n  return config;\n}, error => {\n  console.error('Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// 響應攔截器\naxiosInstance.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    console.log('Received 401 error:', error.response.data); // 調試用\n    console.log('Original request headers:', originalRequest.headers); // 調試用\n\n    if (!originalRequest._retry && !originalRequest.url.includes('/auth/refresh')) {\n      originalRequest._retry = true;\n      try {\n        console.log('Attempting to refresh token...'); // 調試用\n        const response = await axiosInstance.post('/auth/refresh');\n        const {\n          token\n        } = response.data;\n        if (!token) {\n          throw new Error('No token received from refresh endpoint');\n        }\n        console.log('New token received:', token); // 調試用\n        localStorage.setItem('token', token);\n        axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        originalRequest.headers.Authorization = `Bearer ${token}`;\n        return axiosInstance(originalRequest);\n      } catch (refreshError) {\n        console.error('Token refresh failed:', refreshError);\n        localStorage.removeItem('token');\n        delete axiosInstance.defaults.headers.common['Authorization'];\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n  }\n\n  // 其他錯誤處理\n  if (error.response) {\n    console.error('Response error:', error.response);\n  } else if (error.request) {\n    console.error('Request error:', error.request);\n  } else {\n    console.error('Error:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// 認證服務的 API 方法\nexport const authService = {\n  login: async credentials => {\n    const response = await axiosInstance.post('/auth/login', credentials);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${response.data.token}`;\n    }\n    return response;\n  },\n  register: userData => axiosInstance.post('/auth/register', userData),\n  getPreferences: () => axiosInstance.get('/user/preferences'),\n  updatePreferences: async preferences => {\n    try {\n      const response = await axiosInstance.put('/user/preferences', preferences);\n      return response;\n    } catch (error) {\n      console.error('更新用戶偏好設置失敗:', error);\n      throw error;\n    }\n  },\n  getAddresses: () => axiosInstance.get('/user/addresses'),\n  createAddress: async addressData => {\n    try {\n      const response = await axiosInstance.post('/user/addresses', addressData);\n      return response;\n    } catch (error) {\n      console.error('創建地址失敗:', error);\n      throw error;\n    }\n  },\n  updateAddress: async (id, addressData) => {\n    try {\n      const response = await axiosInstance.put(`/user/addresses/${id}`, addressData);\n      return response;\n    } catch (error) {\n      console.error('更新地址失敗:', error);\n      throw error;\n    }\n  },\n  deleteAddress: async id => {\n    try {\n      const response = await axiosInstance.delete(`/user/addresses/${id}`);\n      return response;\n    } catch (error) {\n      console.error('刪除地址失敗:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","axiosInstance","create","baseURL","withCredentials","headers","interceptors","request","use","config","token","localStorage","getItem","console","log","Authorization","warn","error","Promise","reject","response","_error$response","originalRequest","status","data","_retry","url","includes","post","Error","setItem","defaults","common","refreshError","removeItem","window","location","href","message","authService","login","credentials","register","userData","getPreferences","get","updatePreferences","preferences","put","getAddresses","createAddress","addressData","updateAddress","id","deleteAddress","delete"],"sources":["/Users/sumingkai/Documents/OrderManagerSystem/frontend/src/services/authApi.js"],"sourcesContent":["import axios from 'axios';\n\n// const API_URL = 'https://ordermanagersystem-auth-service.onrender.com';\nconst API_URL = 'http://localhost:8083';\n\n// 創建 axios 實例\nconst axiosInstance = axios.create({\n    baseURL: `${API_URL}/api/v1`,\n    withCredentials: true,\n    headers: {\n        'Content-Type': 'application/json',\n    }\n});\n\n// 請求攔截器，添加 token\naxiosInstance.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        console.log('Current token:', token); // 調試用\n\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n            console.log('Request headers:', config.headers); // 調試用\n        } else {\n            console.warn('No token found in localStorage');\n        }\n        return config;\n    },\n    (error) => {\n        console.error('Request interceptor error:', error);\n        return Promise.reject(error);\n    }\n);\n\n// 響應攔截器\naxiosInstance.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n        const originalRequest = error.config;\n\n        if (error.response?.status === 401) {\n            console.log('Received 401 error:', error.response.data); // 調試用\n            console.log('Original request headers:', originalRequest.headers); // 調試用\n\n            if (!originalRequest._retry && !originalRequest.url.includes('/auth/refresh')) {\n                originalRequest._retry = true;\n\n                try {\n                    console.log('Attempting to refresh token...'); // 調試用\n                    const response = await axiosInstance.post('/auth/refresh');\n                    const { token } = response.data;\n\n                    if (!token) {\n                        throw new Error('No token received from refresh endpoint');\n                    }\n\n                    console.log('New token received:', token); // 調試用\n                    localStorage.setItem('token', token);\n                    axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n                    originalRequest.headers.Authorization = `Bearer ${token}`;\n\n                    return axiosInstance(originalRequest);\n                } catch (refreshError) {\n                    console.error('Token refresh failed:', refreshError);\n                    localStorage.removeItem('token');\n                    delete axiosInstance.defaults.headers.common['Authorization'];\n                    window.location.href = '/login';\n                    return Promise.reject(refreshError);\n                }\n            }\n        }\n\n        // 其他錯誤處理\n        if (error.response) {\n            console.error('Response error:', error.response);\n        } else if (error.request) {\n            console.error('Request error:', error.request);\n        } else {\n            console.error('Error:', error.message);\n        }\n        return Promise.reject(error);\n    }\n);\n\n// 認證服務的 API 方法\nexport const authService = {\n    login: async (credentials) => {\n        const response = await axiosInstance.post('/auth/login', credentials);\n        if (response.data.token) {\n            localStorage.setItem('token', response.data.token);\n            axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${response.data.token}`;\n        }\n        return response;\n    },\n    register: (userData) => axiosInstance.post('/auth/register', userData),\n    getPreferences: () => axiosInstance.get('/user/preferences'),\n    updatePreferences: async (preferences) => {\n        try {\n            const response = await axiosInstance.put('/user/preferences', preferences);\n            return response;\n        } catch (error) {\n            console.error('更新用戶偏好設置失敗:', error);\n            throw error;\n        }\n    },\n    getAddresses: () => axiosInstance.get('/user/addresses'),\n    createAddress: async (addressData) => {\n        try {\n            const response = await axiosInstance.post('/user/addresses', addressData);\n            return response;\n        } catch (error) {\n            console.error('創建地址失敗:', error);\n            throw error;\n        }\n    },\n    updateAddress: async (id, addressData) => {\n        try {\n            const response = await axiosInstance.put(`/user/addresses/${id}`, addressData);\n            return response;\n        } catch (error) {\n            console.error('更新地址失敗:', error);\n            throw error;\n        }\n    },\n    deleteAddress: async (id) => {\n        try {\n            const response = await axiosInstance.delete(`/user/addresses/${id}`);\n            return response;\n        } catch (error) {\n            console.error('刪除地址失敗:', error);\n            throw error;\n        }\n    },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}