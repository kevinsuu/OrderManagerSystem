{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst HEALTH_CHECK_INTERVAL = 5 * 60 * 1000; // 5分鐘\n\nconst SERVICES = [{\n  name: 'Auth Service',\n  url: 'https://ordermanagersystem-auth-service.onrender.com/health'\n}, {\n  name: 'Product Service',\n  url: 'https://ordermanagersystem-product-service.onrender.com/health'\n}, {\n  name: 'Order Service',\n  url: 'https://ordermanagersystem-order-service.onrender.com/health'\n}, {\n  name: 'Payment Service',\n  url: 'https://ordermanagersystem-payment-service.onrender.com/health'\n}, {\n  name: 'Notification Service',\n  url: 'https://ordermanagersystem-notification-service.onrender.com/health'\n}, {\n  name: 'Main Service',\n  url: 'https://ordermanagersystem.onrender.com/health'\n}];\nexport const useHealthCheck = () => {\n  _s();\n  const [serviceStatus, setServiceStatus] = useState({});\n  const [isAnyServiceDown, setIsAnyServiceDown] = useState(false);\n  const checkHealth = async () => {\n    const newStatus = {};\n    let anyServiceDown = false;\n    await Promise.all(SERVICES.map(async service => {\n      try {\n        const response = await fetch(service.url);\n        const isHealthy = response.ok;\n        newStatus[service.name] = isHealthy;\n        if (!isHealthy) anyServiceDown = true;\n      } catch (error) {\n        console.error(`Health check failed for ${service.name}:`, error);\n        newStatus[service.name] = false;\n        anyServiceDown = true;\n      }\n    }));\n    setServiceStatus(newStatus);\n    setIsAnyServiceDown(anyServiceDown);\n  };\n  useEffect(() => {\n    // 初始檢查\n    checkHealth();\n\n    // 設置定期檢查\n    const interval = setInterval(checkHealth, HEALTH_CHECK_INTERVAL);\n\n    // 清理函數\n    return () => clearInterval(interval);\n  }, []);\n  return {\n    serviceStatus,\n    isAnyServiceDown\n  };\n};\n_s(useHealthCheck, \"Z6JkwXTao9BF0FJHu34FueXp7TE=\");","map":{"version":3,"names":["useState","useEffect","HEALTH_CHECK_INTERVAL","SERVICES","name","url","useHealthCheck","_s","serviceStatus","setServiceStatus","isAnyServiceDown","setIsAnyServiceDown","checkHealth","newStatus","anyServiceDown","Promise","all","map","service","response","fetch","isHealthy","ok","error","console","interval","setInterval","clearInterval"],"sources":["/Users/sumingkai/Documents/OrderManagerSystem/frontend/src/utils/healthCheck.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst HEALTH_CHECK_INTERVAL = 5 * 60 * 1000; // 5分鐘\n\nconst SERVICES = [\n    {\n        name: 'Auth Service',\n        url: 'https://ordermanagersystem-auth-service.onrender.com/health'\n    },\n    {\n        name: 'Product Service',\n        url: 'https://ordermanagersystem-product-service.onrender.com/health'\n    },\n    {\n        name: 'Order Service',\n        url: 'https://ordermanagersystem-order-service.onrender.com/health'\n    },\n    {\n        name: 'Payment Service',\n        url: 'https://ordermanagersystem-payment-service.onrender.com/health'\n    },\n    {\n        name: 'Notification Service',\n        url: 'https://ordermanagersystem-notification-service.onrender.com/health'\n    },\n    {\n        name: 'Main Service',\n        url: 'https://ordermanagersystem.onrender.com/health'\n    }\n];\n\nexport const useHealthCheck = () => {\n    const [serviceStatus, setServiceStatus] = useState({});\n    const [isAnyServiceDown, setIsAnyServiceDown] = useState(false);\n\n    const checkHealth = async () => {\n        const newStatus = {};\n        let anyServiceDown = false;\n\n        await Promise.all(\n            SERVICES.map(async (service) => {\n                try {\n                    const response = await fetch(service.url);\n                    const isHealthy = response.ok;\n                    newStatus[service.name] = isHealthy;\n                    if (!isHealthy) anyServiceDown = true;\n                } catch (error) {\n                    console.error(`Health check failed for ${service.name}:`, error);\n                    newStatus[service.name] = false;\n                    anyServiceDown = true;\n                }\n            })\n        );\n\n        setServiceStatus(newStatus);\n        setIsAnyServiceDown(anyServiceDown);\n    };\n\n    useEffect(() => {\n        // 初始檢查\n        checkHealth();\n\n        // 設置定期檢查\n        const interval = setInterval(checkHealth, HEALTH_CHECK_INTERVAL);\n\n        // 清理函數\n        return () => clearInterval(interval);\n    }, []);\n\n    return {\n        serviceStatus,\n        isAnyServiceDown\n    };\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;AAE7C,MAAMC,QAAQ,GAAG,CACb;EACIC,IAAI,EAAE,cAAc;EACpBC,GAAG,EAAE;AACT,CAAC,EACD;EACID,IAAI,EAAE,iBAAiB;EACvBC,GAAG,EAAE;AACT,CAAC,EACD;EACID,IAAI,EAAE,eAAe;EACrBC,GAAG,EAAE;AACT,CAAC,EACD;EACID,IAAI,EAAE,iBAAiB;EACvBC,GAAG,EAAE;AACT,CAAC,EACD;EACID,IAAI,EAAE,sBAAsB;EAC5BC,GAAG,EAAE;AACT,CAAC,EACD;EACID,IAAI,EAAE,cAAc;EACpBC,GAAG,EAAE;AACT,CAAC,CACJ;AAED,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACU,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE/D,MAAMY,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMC,SAAS,GAAG,CAAC,CAAC;IACpB,IAAIC,cAAc,GAAG,KAAK;IAE1B,MAAMC,OAAO,CAACC,GAAG,CACbb,QAAQ,CAACc,GAAG,CAAC,MAAOC,OAAO,IAAK;MAC5B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,OAAO,CAACb,GAAG,CAAC;QACzC,MAAMgB,SAAS,GAAGF,QAAQ,CAACG,EAAE;QAC7BT,SAAS,CAACK,OAAO,CAACd,IAAI,CAAC,GAAGiB,SAAS;QACnC,IAAI,CAACA,SAAS,EAAEP,cAAc,GAAG,IAAI;MACzC,CAAC,CAAC,OAAOS,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,2BAA2BL,OAAO,CAACd,IAAI,GAAG,EAAEmB,KAAK,CAAC;QAChEV,SAAS,CAACK,OAAO,CAACd,IAAI,CAAC,GAAG,KAAK;QAC/BU,cAAc,GAAG,IAAI;MACzB;IACJ,CAAC,CACL,CAAC;IAEDL,gBAAgB,CAACI,SAAS,CAAC;IAC3BF,mBAAmB,CAACG,cAAc,CAAC;EACvC,CAAC;EAEDb,SAAS,CAAC,MAAM;IACZ;IACAW,WAAW,CAAC,CAAC;;IAEb;IACA,MAAMa,QAAQ,GAAGC,WAAW,CAACd,WAAW,EAAEV,qBAAqB,CAAC;;IAEhE;IACA,OAAO,MAAMyB,aAAa,CAACF,QAAQ,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACHjB,aAAa;IACbE;EACJ,CAAC;AACL,CAAC;AAACH,EAAA,CA1CWD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}